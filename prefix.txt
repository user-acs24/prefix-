#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define STACKSIZE  100

struct stack
{
    char items[STACKSIZE];
    int top;
};

typedef struct stack STACK;

void push(STACK *s, char x)
{
    if (s->top == (STACKSIZE - 1))
    {
        printf("Stack Overflow\n");
        exit(0);
    }
    s->items[++s->top] = x;
}

char pop(STACK *s)
{
    if (s->top == -1)
    {
        printf("Stack Underflow!\n");
        exit(0);
    }
    return s->items[s->top--];
}

char stackTop(STACK *s)
{
    if (s->top == -1)
    {
        printf("Underflow");
        exit(0);
    }
    return (s->items[s->top]);
}

void display(STACK *s)
{
    for (int i = 0; i <= s->top; i++)
    {
        printf("%c\n", s->items[i]);
    }
}

int preced(char symbol)
{
    switch (symbol)
    {
    case '^':
        return 5;
    case '*':
    case '/':
        return 3;
    case '+':
    case '-':
        return 1;
    }
}

void infix_to_prefix(char infix[30], STACK *s)
{
    char prefix[30], symbol, temp;
    int i, j;
    j = 0;

    // Reverse the infix expression
    int len = strlen(infix);
    for (i = len - 1; i >= 0; i--)
    {
        push(s, infix[i]);
    }

    // Process the reversed infix expression to get the prefix expression
    while (s->top != -1)
    {
        symbol = pop(s);

        if (isalnum(symbol))
        {
            prefix[j++] = symbol;
        }
        else
        {
            switch (symbol)
            {
            case ')':
                push(s, symbol);
                break;
            case '(':
                temp = pop(s);
                while (temp != ')')
                {
                    prefix[j++] = temp;
                    temp = pop(s);
                }
                break;
            case '+':
            case '-':
            case '*':
            case '/':
            case '^':
                if (s->top == -1 || s->items[s->top] == ')')
                {
                    push(s, symbol);
                    break;
                }
                else
                {
                    while (preced(s->items[s->top]) >= preced(symbol) && s->top != -1 && s->items[s->top] != ')')
                    {
                        prefix[j++] = pop(s);
                    }
                    push(s, symbol);
                    break;
                }
            }
        }
    }

    // Pop any remaining operators from the stack
    while (s->top != -1)
    {
        prefix[j++] = pop(s);
    }

    prefix[j] = '\0';

    // Reverse the final prefix expression to get the correct order
    len = strlen(prefix);
    for (i = 0; i < len / 2; i++)
    {
        temp = prefix[i];
        prefix[i] = prefix[len - i - 1];
        prefix[len - i - 1] = temp;
    }

    printf("Prefix expression is: %s\n", prefix);
}

int main()
{
    char infix[20];
    STACK s;
    s.top = -1;
    printf("Enter infix expression\n");
    scanf("%s", infix);
    infix_to_prefix(infix, &s);

    return 0;
}
